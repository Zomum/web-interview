(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{392:function(e,t,r){"use strict";r.r(t);var v=r(42),a=Object(v.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("【 未完成 】")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.im/post/5ca456bfe51d456d3c45fef4",target:"_blank",rel:"noopener noreferrer"}},[e._v("【Vue原理剖析】Object的变化侦测"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"mvvm-实现思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-实现思路"}},[e._v("#")]),e._v(" MVVM 实现思路")]),e._v(" "),r("p",[e._v("我们都知道，vue是基于MVVM设计模式的渐进式框架。那么在JavaScript中，我们该如何实现一个MVVM框架呢？ 主流的实现MVVM框架的思路有三种：")]),e._v(" "),r("ul",[r("li",[e._v("backbone.js")])]),e._v(" "),r("blockquote",[r("p",[e._v("发布者-订阅者模式，一般通过pub和sub的方式实现数据和视图的绑定。")])]),e._v(" "),r("ul",[r("li",[e._v("Angular.js")])]),e._v(" "),r("blockquote",[r("p",[e._v("Angular.js是通过脏值监测的方式对比数据是否有变更，来决定是否更新视图。类似于通过定时器轮寻监测数据是否发生了额改变。")])]),e._v(" "),r("ul",[r("li",[e._v("Vue.js")])]),e._v(" "),r("blockquote",[r("p",[e._v("Vue.js是采用数据劫持结合发布者-订阅者模式的方式。在vue2.6之前，是通过"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"}},[e._v("Object.defineProperty()"),r("OutboundLink")],1),e._v(" 来劫持各个属性的setter和getter方法，在数据变动时发布消息给订阅者，触发相应的回调。这也是IE8以下的浏览器不支持vue的根本原因。")])]),e._v(" "),r("h3",{attrs:{id:"vue实现思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue实现思路"}},[e._v("#")]),e._v(" Vue实现思路")]),e._v(" "),r("ul",[r("li",[e._v("实现一个Compile模板解析器，能够对模板中的指令和插值表达式进行解析，并赋予对应的操作")]),e._v(" "),r("li",[e._v("实现一个Observer数据监听器，能够对数据对象（data）的所有属性进行监听")]),e._v(" "),r("li",[e._v("实现一个Watcher 侦听器。讲Compile的解析结果，与Observer所观察的对象连接起来，建立关系，在Observer观察到数据对象变化时，接收通知，并更新DOM")]),e._v(" "),r("li",[e._v("创建一个公共的入口对象（Vue），接收初始化配置，并协调Compile、Observer、Watcher模块，也就是Vue。")])]),e._v(" "),r("p",[e._v("上述流程如下图所示：")]),e._v(" "),r("p",[r("img",{attrs:{src:"img/1C9B8138-117B-461C-81ED-28E462228BB9.png",alt:"1C9B8138-117B-461C-81ED-28E462228BB9"}})]),e._v(" "),r("h4",{attrs:{id:"vue入口文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue入口文件"}},[e._v("#")]),e._v(" Vue入口文件")]),e._v(" "),r("p",[e._v("把逻辑捋顺清楚后，我们会发现，其实我们要在这个入口文件做的事情很简单：")]),e._v(" "),r("ul",[r("li",[e._v("把data和methods挂载到根实例中；")]),e._v(" "),r("li",[e._v("用Observer模块监听data所有属性的变化")]),e._v(" "),r("li",[e._v("如果存在挂载点，则用Compile模块编译该挂载点下的所有指令和插值表达式")])]),e._v(" "),r("h5",{attrs:{id:"compile模块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#compile模块"}},[e._v("#")]),e._v(" Compile模块")]),e._v(" "),r("p",[e._v("compile主要做的事情是解析指令（属性节点）与插值表达式（文本节点），将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图。")]),e._v(" "),r("h5",{attrs:{id:"observer模块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#observer模块"}},[e._v("#")]),e._v(" Observer模块")]),e._v(" "),r("p",[e._v("其实在Observer模块中，我们要做的事情也不多，就是提供一个"),r("code",[e._v("walk()")]),e._v("方法，递归劫持"),r("code",[e._v("vm.$data")]),e._v("中的所有数据，拦截setter和getter。如果数据变更，则发布通知,让所有订阅者更新内容，改变视图。")]),e._v(" "),r("h5",{attrs:{id:"watcher模块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#watcher模块"}},[e._v("#")]),e._v(" Watcher模块")]),e._v(" "),r("p",[e._v("Watcher的作用就是将Compile解析的结果和Observer观察的对象关联起来，建立关系，当Observer观察的数据发生变化是，接收通知（"),r("code",[e._v("dep.notify")]),e._v("）告诉Watcher，Watcher在通过Compile更新DOM。这里面涉及一个发布者-订阅者模式的思想。")]),e._v(" "),r("h5",{attrs:{id:"什么是发布者-订阅者模式？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是发布者-订阅者模式？"}},[e._v("#")]),e._v(" 什么是发布者-订阅者模式？")]),e._v(" "),r("blockquote",[r("p",[e._v("发布者-订阅者模式也叫观察者模式。 他定义了一种一对多的依赖关系，即当一个对象的状态发生改变时，所有依赖于他的对象都会得到通知并自动更新，解决了主体对象与观察者之间功能的耦合。")])]),e._v(" "),r("p",[e._v("譬如我们一个班级都订阅了公众号，那么这个班级的每个人都是订阅者（subscriber），公众号则是发布者（publisher）。如果某一天公众号发现文章内容出错了，需要修改一个错别字（修改vm.$data中的数据），是不是要通知每一个订阅者？总不能学委那里的文章发生了改变，而班长的文章没有发生改变吧。在这个过程中，发布者不用关心谁订阅了它，只需要给所有订阅者推送这条更新的消息即可（notify）。")]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("https://juejin.im/user/5a6fdcfc51882522b5529eb0/posts")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.im/post/5d75afec6fb9a06aeb10e354",target:"_blank",rel:"noopener noreferrer"}},[e._v("【Vue原理】Diff - 白话版"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);